[
  {
    "id": "SOP001",
    "title": "Double Charge Issue Resolution",
    "description": "This procedure addresses cases where a customer is charged multiple times for a single order, causing financial inconvenience (e.g., ticket 1: customer CUST10001 double charged $600 for a Samsung 4K TV, purchase_id PURC00001).\n\n**Stage 1: Verify Transaction Details**\n- **Access** the payment gateway (e.g., Stripe, PayPal) using the **purchase_id** (e.g., PURC00001).\n- **Confirm** multiple charges for the same **order number** (e.g., #ORD50001) by cross-referencing the customer's bank statement and transaction logs.\n- **Document** the transaction IDs, amounts, and timestamps to ensure accuracy.\n\n**Stage 2: Process Refund for Duplicate Charge**\n- **Initiate** a refund for the duplicate amount (e.g., $600) through the original payment method (credit card, PayPal, etc.).\n- **Update** the **purchase_status** in the purchase table to reflect the correction, ensuring the order for the item (e.g., ITEM2001: Samsung 4K TV) remains active.\n- **Log** the refund details in the customer service system for audit purposes.\n\n**Stage 3: Confirm Resolution with Customer**\n- **Send** an email to the customer (e.g., CUST10001) confirming the **refund** has been processed, including the refunded amount and expected bank processing time (3-5 business days).\n- **Verify** the order details (e.g., ITEM2001) and confirm the customer received the correct item or order status.\n- **Follow up** if the customer reports issues with the refund, ensuring satisfaction."
  },
  {
    "id": "SOP002",
    "title": "Payment Deducted but Order Not Placed Resolution",
    "description": "This SOP resolves cases where a payment is deducted from the customer\u2019s account, but no order is created in the system (e.g., ticket 2: CUST10002 charged $700 for Dyson V15 vacuum, purchase_id PURC00002, no order confirmation).\n\n**Stage 1: Verify Payment and Order Status**\n- **Check** the payment gateway for the transaction using the **customer_id** (e.g., CUST10002) and transaction details provided in the ticket.\n- **Confirm** no corresponding **purchase_id** (e.g., PURC00002) exists in the purchase table, indicating a failed order placement.\n- **Review** any error logs in the system to identify the cause (e.g., server timeout, payment rejection).\n\n**Stage 2: Process Refund or Complete Order**\n- **Offer** the customer a choice: **refund** the full amount (e.g., $700) or **manually process** the order for the item (e.g., ITEM2002: Dyson V15 vacuum).\n- If refunding, **initiate** the refund via the original payment method and update the ticket status.\n- If processing the order, **create** a new purchase record and confirm stock for the item.\n\n**Stage 3: Notify Customer of Resolution**\n- **Email** the customer with details of the **refund** (including amount and timeline) or **order confirmation** (with shipping details for ITEM2002).\n- **Request** confirmation from the customer that the issue is resolved.\n- **Monitor** for follow-up inquiries to ensure the customer\u2019s account reflects the resolution."
  },
  {
    "id": "SOP003",
    "title": "Payment Gateway Error Resolution",
    "description": "This procedure handles cases where a payment fails due to a gateway error, but a charge appears on the customer\u2019s account (e.g., ticket 3: CUST10003 charged $1200 for MacBook Air M2, purchase_id PURC00003).\n\n**Stage 1: Verify Transaction and Error Details**\n- **Access** the payment gateway and locate the transaction using the **purchase_id** (e.g., PURC00003) and **customer_id** (e.g., CUST10003).\n- **Identify** the error code (e.g., gateway timeout, invalid response) and confirm the charge status with the customer\u2019s bank details.\n- **Check** the purchase table to see if the order for the item (e.g., ITEM2003: MacBook Air M2) was recorded.\n\n**Stage 2: Resolve Charge or Complete Order**\n- If the charge is valid, **process** the order by updating the **purchase_status** to 'completed' and initiating shipping.\n- If the charge is invalid, **refund** the full amount (e.g., $1200) via the original payment method.\n- **Document** the resolution in the ticket and payment system for tracking.\n\n**Stage 3: Update Customer on Status**\n- **Notify** the customer via email with the resolution: either an **order confirmation** with tracking details or a **refund confirmation** with the amount and timeline.\n- **Confirm** the item details (e.g., ITEM2003) to ensure the customer expects the correct product.\n- **Follow up** if the customer reports discrepancies, ensuring full resolution."
  },
  {
    "id": "SOP004",
    "title": "PayPal Payment Stuck Resolution",
    "description": "This SOP addresses PayPal payments stuck in 'processing' status, preventing order completion (e.g., ticket 4: CUST10004 paid $150 for Bose headphones, purchase_id PURC00004).\n\n**Stage 1: Verify PayPal Transaction Status**\n- **Log in** to the PayPal business account and search for the transaction using the **customer_id** (e.g., CUST10004) or **purchase_id** (e.g., PURC00004).\n- **Check** the transaction status (e.g., 'pending,' 'on hold') and review any holds or disputes.\n- **Confirm** with the customer if the payment is still on hold in their PayPal account.\n\n**Stage 2: Release Payment or Refund**\n- If the payment is valid, **release** the hold to complete the order for the item (e.g., ITEM2004: Bose QuietComfort headphones) and update the **purchase_status** to 'completed.'\n- If the payment cannot be released, **cancel** the transaction and **refund** the full amount ($150).\n- **Update** the ticket with the action taken and log details in the payment system.\n\n**Stage 3: Confirm with Customer**\n- **Email** the customer with the resolution: either an **order confirmation** with shipping details or a **refund confirmation** with the amount and timeline.\n- **Verify** the customer received the item (e.g., ITEM2004) or the refund in their PayPal account.\n- **Address** any further inquiries to ensure customer satisfaction."
  },
  {
    "id": "SOP005",
    "title": "Overcharge on Order Resolution",
    "description": "This procedure corrects cases where a customer is charged more than the item\u2019s listed price (e.g., ticket 5: CUST10005 overcharged $50 for Ninja Foodi Grill, purchase_id PURC00005).\n\n**Stage 1: Verify Charge and Item Price**\n- **Review** the purchase record using the **purchase_id** (e.g., PURC00005) in the purchase table.\n- **Compare** the charged amount with the item price in the item table (e.g., ITEM2005: Ninja Foodi Grill, expected $250).\n- **Confirm** the overcharge (e.g., $300 charged) with the customer\u2019s receipt or bank statement.\n\n**Stage 2: Process Partial Refund**\n- **Calculate** the overcharged amount (e.g., $50) and **initiate** a partial refund via the original payment method.\n- **Ensure** the order for the item (e.g., ITEM2005) remains active with the correct **purchase_status** ('completed').\n- **Log** the refund details in the customer service system for audit purposes.\n\n**Stage 3: Notify Customer of Refund**\n- **Send** an email to the customer (e.g., CUST10005) with the **refund confirmation**, detailing the amount ($50) and expected processing time.\n- **Verify** the order details (e.g., ITEM2005) to ensure the customer received the correct item.\n- **Follow up** if the customer reports issues with the refund or order."
  },
  {
    "id": "SOP006",
    "title": "Refund for Canceled Order Resolution",
    "description": "This SOP manages refunds for orders canceled before shipping (e.g., ticket 6: CUST10006 canceled kids' bicycle order, purchase_id PURC00006).\n\n**Stage 1: Confirm Cancellation Request**\n- **Check** the purchase table using the **purchase_id** (e.g., PURC00006) to confirm the **purchase_status** is 'canceled.'\n- **Verify** the cancellation request in the ticket (e.g., ticket 6) and ensure the item (e.g., ITEM2006: kids' bicycle) was not shipped.\n- **Review** the payment gateway to confirm the charge (e.g., $100) is still present.\n\n**Stage 2: Process Full Refund**\n- **Initiate** a full refund for the charged amount (e.g., $100) via the original payment method.\n- **Update** the ticket status to reflect the refund processing and note the cancellation in the system.\n- **Ensure** inventory for the item (e.g., ITEM2006) is updated if necessary.\n\n**Stage 3: Notify Customer of Refund**\n- **Email** the customer (e.g., CUST10006) with **refund confirmation**, including the amount and expected bank processing time.\n- **Confirm** the order was canceled and no further action is needed for the item (e.g., ITEM2006).\n- **Address** any customer inquiries to ensure satisfaction."
  },
  {
    "id": "SOP007",
    "title": "Payment Pending Issue Resolution",
    "description": "This procedure resolves cases where an order is marked 'payment pending' despite a completed payment (e.g., ticket 7: CUST10007 paid $80 for Logitech MX Keys, purchase_id PURC00007).\n\n**Stage 1: Verify Payment Status**\n- **Access** the payment gateway using the **purchase_id** (e.g., PURC00007) and **customer_id** (e.g., CUST10007).\n- **Confirm** the payment was processed by checking transaction logs and the customer\u2019s bank statement.\n- **Check** the purchase table to verify the **purchase_status** is incorrectly set to 'pending.'\n\n**Stage 2: Update Order or Refund**\n- If the payment is valid, **update** the **purchase_status** to 'completed' and initiate order processing for the item (e.g., ITEM2007: Logitech MX Keys).\n- If the payment is invalid, **refund** the amount ($80) via the original payment method.\n- **Log** the resolution in the ticket and customer service system.\n\n**Stage 3: Confirm with Customer**\n- **Notify** the customer via email with the **order confirmation** (including shipping details) or **refund confirmation**.\n- **Verify** the item details (e.g., ITEM2007) to ensure the customer expects the correct product.\n- **Follow up** if the customer reports issues with the order or refund."
  },
  {
    "id": "SOP008",
    "title": "Discount Code Not Applied Resolution",
    "description": "This SOP fixes cases where a discount code was not applied at checkout, resulting in a higher charge (e.g., ticket 8: CUST10008 not discounted $30 for bath towels, purchase_id PURC00008).\n\n**Stage 1: Verify Discount Eligibility**\n- **Check** the discount code details in the system to confirm its validity and applicability to the item (e.g., ITEM2008: bath towels).\n- **Review** the purchase record using the **purchase_id** (e.g., PURC00008) to verify the charged amount ($90) versus the expected amount ($60).\n- **Confirm** with the customer (e.g., CUST10008) that the code was entered correctly.\n\n**Stage 2: Apply Discount or Refund**\n- **Process** a partial refund for the discount amount (e.g., $30) via the original payment method.\n- Alternatively, **apply** the discount to the order and update the purchase record if the order is still processing.\n- **Log** the action in the customer service system for tracking.\n\n**Stage 3: Notify Customer of Resolution**\n- **Email** the customer with **refund confirmation** or updated order total, detailing the discount applied.\n- **Verify** the order details (e.g., ITEM2008) to ensure the customer received the correct item.\n- **Address** any further inquiries to ensure customer satisfaction."
  },
  {
    "id": "SOP009",
    "title": "Apple Pay Transaction Error Resolution",
    "description": "This procedure resolves Apple Pay errors where payment is deducted but no order is placed (e.g., ticket 9: CUST10009 charged $400 for Canon EOS R50, purchase_id PURC00009).\n\n**Stage 1: Verify Apple Pay Transaction**\n- **Access** Apple Pay transaction logs via the payment gateway using the **customer_id** (e.g., CUST10009) and **purchase_id** (e.g., PURC00009).\n- **Confirm** the payment was deducted but no order exists in the purchase table.\n- **Review** error messages (e.g., 'transaction failed') to identify the cause.\n\n**Stage 2: Refund or Process Order**\n- If no order was placed, **initiate** a full refund for the amount (e.g., $400) via Apple Pay.\n- If the customer prefers, **manually process** the order for the item (e.g., ITEM2009: Canon EOS R50) and confirm stock availability.\n- **Update** the ticket with the action taken and log details.\n\n**Stage 3: Confirm Resolution with Customer**\n- **Notify** the customer via email with **refund confirmation** or **order confirmation**, including details for the item (e.g., ITEM2009).\n- **Request** confirmation that the refund or order meets expectations.\n- **Follow up** if the customer reports issues with the resolution."
  },
  {
    "id": "SOP010",
    "title": "Payment Flagged by Bank Resolution",
    "description": "This SOP handles payments flagged as suspicious by the customer\u2019s bank, preventing order processing (e.g., ticket 10: CUST10010 paid $50 for desk organizer, purchase_id PURC00010).\n\n**Stage 1: Verify Payment and Customer Intent**\n- **Contact** the customer (e.g., CUST10010) via email or phone to **confirm** the payment\u2019s legitimacy.\n- **Check** the payment gateway using the **purchase_id** (e.g., PURC00010) to verify the flagged status.\n- **Review** the purchase table to ensure no order was processed for the item (e.g., ITEM2010: desk organizer).\n\n**Stage 2: Process Order or Refund**\n- If the customer confirms the payment, **release** the flagged transaction and update the **purchase_status** to 'completed,' initiating order processing.\n- If the payment is declined or unauthorized, **refund** the amount ($50) via the original payment method.\n- **Document** the resolution in the ticket and payment system.\n\n**Stage 3: Update Customer on Resolution**\n- **Email** the customer with **order confirmation** (including shipping details for ITEM2010) or **refund confirmation**.\n- **Verify** the customer is satisfied with the resolution.\n- **Monitor** for further inquiries to ensure the issue is fully resolved."
  },
  {
    "id": "SOP011",
    "title": "Google Pay Payment Stuck Resolution",
    "description": "This procedure fixes Google Pay payments stuck in 'processing' status, delaying order completion (e.g., ticket 14: CUST10014 paid $120 for AirPods Pro, purchase_id PURC00014).\n\n**Stage 1: Verify Google Pay Transaction Status**\n- **Log in** to the Google Pay business account and locate the transaction using the **customer_id** (e.g., CUST10014) or **purchase_id** (e.g., PURC00014).\n- **Check** the transaction status (e.g., 'pending') and identify any holds or errors.\n- **Confirm** with the customer if the payment is still on hold in their Google Pay account.\n\n**Stage 2: Release Payment or Refund**\n- If the payment is valid, **release** the hold to complete the order for the item (e.g., ITEM2014: AirPods Pro) and update the **purchase_status** to 'completed.'\n- If the payment cannot be released, **cancel** the transaction and **refund** the full amount ($120).\n- **Log** the action in the customer service system for tracking.\n\n**Stage 3: Confirm with Customer**\n- **Notify** the customer via email with **order confirmation** (including shipping details) or **refund confirmation** for the item (e.g., ITEM2014).\n- **Verify** the customer received the item or refund in their Google Pay account.\n- **Address** any further inquiries to ensure customer satisfaction."
  }
]